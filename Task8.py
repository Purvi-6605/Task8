# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190qQhmoZu1Ksv0iQhyukykwcgYLx22xQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score

# 1. Load Dataset
df = pd.read_csv('Mall_Customers.csv')
print("First 5 rows of dataset:")
print(df.head())

# 2. Encode Gender column to numeric (Male=1, Female=0)
if 'Gender' in df.columns:
    le = LabelEncoder()
    df['Gender'] = le.fit_transform(df['Gender'])

# 3. Drop CustomerID column (not needed for clustering)
X = df.drop(columns=['CustomerID'], errors='ignore')

# 4. Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 5. Elbow Method to find optimal K
wcss = []
K_range = range(2, 11)
for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(6, 4))
plt.plot(K_range, wcss, marker='o')
plt.title('Elbow Method to Find Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('WCSS')
plt.show()

# Choose K from Elbow Plot (example: 5)
optimal_k = 5
kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
y_kmeans = kmeans.fit_predict(X_scaled)

# 6. Add cluster labels
df['Cluster'] = y_kmeans
print("\nCluster counts:")
print(df['Cluster'].value_counts())

# 7. Silhouette Score
sil_score = silhouette_score(X_scaled, y_kmeans)
print(f"\nSilhouette Score for K={optimal_k}: {sil_score:.3f}")

# 8. Visualization with PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_kmeans, cmap='rainbow', s=50, alpha=0.7)
plt.title(f'K-Means Clustering (K={optimal_k}) - PCA 2D Projection')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()

